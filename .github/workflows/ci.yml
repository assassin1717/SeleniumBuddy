name: CI (build + test + bump + publish)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write # necessário para o job 'bump' fazer commit+tag

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore ./SeleniumBuddy/SeleniumBuddy.csproj

      - name: Build
        run: dotnet build ./SeleniumBuddy/SeleniumBuddy.csproj -c Release --no-restore

      # Publica binários de teste para artifacts (como já usavas)
      - name: Publish test binaries
        run: dotnet publish ./SeleniumBuddyTests/SeleniumBuddyTests.csproj -c Release -o ./artifacts

      # --- PATCH 1: garantir permissões de execução no Linux antes do upload ---
      - name: Make selenium-manager executable (Linux) before upload
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          SEL_MGR=$(find ./artifacts -path "*/runtimes/linux/native/selenium-manager" | head -n 1 || true)
          if [ -n "$SEL_MGR" ]; then
            chmod +x "$SEL_MGR"
            echo "chmod +x $SEL_MGR"
          else
            echo "selenium-manager not found under artifacts (ok if resolved at runtime)"
          fi

      - name: Upload test binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Download test binaries
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-test-binaries
          path: ./artifacts

      # --- PATCH 2: garantir permissões de execução no Linux antes de testar ---
      - name: Ensure selenium-manager is executable (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          SEL_MGR=$(find ./artifacts -path "*/runtimes/linux/native/selenium-manager" | head -n 1 || true)
          if [ -n "$SEL_MGR" ]; then
            chmod +x "$SEL_MGR"
            echo "chmod +x $SEL_MGR"
          else
            echo "selenium-manager not found under artifacts; Selenium will try system path"
          fi

      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          TESTDLL=$(find ./artifacts -name "SeleniumBuddyTests.dll" | head -n 1)
          if [ -z "$TESTDLL" ]; then echo "Test DLL not found"; exit 1; fi
          dotnet vstest "$TESTDLL" --logger:"trx;LogFileName=test-results.trx" /collect:"XPlat Code Coverage"

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $testDll = Get-ChildItem -Recurse -Filter SeleniumBuddyTests.dll -Path ./artifacts | Select-Object -First 1
          if (-not $testDll) { Write-Error "Test DLL not found"; exit 1 }
          dotnet vstest $testDll.FullName --logger:"trx;LogFileName=test-results.trx" /collect:"XPlat Code Coverage"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-test-results
          path: |
            **/test-results.trx
            **/coverage.cobertura.xml

  bump:
    name: Bump version & tag
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Run bump-version-ci.ps1
        shell: pwsh
        run: ./bump-version-ci.ps1
